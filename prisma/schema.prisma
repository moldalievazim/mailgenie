generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Billings {
  id       String @id @default(uuid())
  fullname String
  clerkId  String
  stripeId String
  type     String
  plan     String
  credits  Int
  userId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user     User   @relation(fields: [userId], references: [id])
}

model Bookings {
  id         String   @id
  date       DateTime
  slot       String
  email      String
  customerId String
  domainId   String   @unique
  Customer   Customer @relation(fields: [customerId], references: [id])
  domain     Domain   @relation(fields: [domainId], references: [id])
}

model Campaign {
  id        String   @id @default(uuid())
  name      String
  customers String[]
  userId    String   @unique
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])

  domains   Domain[]
}

model ChatMessage {
  id            String   @id @default(uuid())
  message       String
  role          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  chatRoomId    String
  seen          Boolean
  chatRoom      Chatbot  @relation(fields: [chatRoomId], references: [id])
}

model Chatbot {
  id              String @id @default(uuid())
  welcomeMessage  String
  icon            String
  background      String
  textColor       String
  helpdesk        Boolean
  domainId        String
  domain          Domain @relation(fields: [domainId], references: [id])

  chatMessages ChatMessage[]
}

model Customer {
  id        String @id @default(uuid())
  email     String
  demand    String
  domainId  String
  domain    Domain @relation(fields: [domainId], references: [id])

  bookings Bookings[]
}
model Domain {
  id        String   @id @default(uuid())
  domain    String   @unique
  icon      String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  campaign    Campaign @relation(fields: [campaignId], references: [id])
  
  chatbots       Chatbot[]
  filtersQuestions FiltersQuestions[]
  customers       Customer[]
  products        Product[]
  bookings        Bookings[]
}

model FiltersQuestions {
  id       String @id
  question String
  answered String
  domainId String
  domain   Domain @relation(fields: [domainId], references: [id])
}

model Product {
  id        String   @id
  name      String
  price     Int
  image     String
  createdAt DateTime @default(now())
  domainId  String
  domain    Domain   @relation(fields: [domainId], references: [id])
}

model User {
  id           String         @id @default(uuid())
  fullname     String
  clerkId      String         @unique
  type         String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  stripeId     String?        @unique
  subscription Subscription?
  domains      Domain[]
  billings     Billings[]
  campaigns    Campaign[]
}

model Subscription {
  id        String           @id @default(uuid())
  userId    String           @unique
  plan      SubscriptionPlan @default(FREE)
  startDate DateTime         @default(now())
  endDate   DateTime?
  User      User             @relation(fields: [userId], references: [id])
}

enum SubscriptionPlan {
  FREE
  PRO
  ENTERPRISE
}

enum Role {
  User
}
