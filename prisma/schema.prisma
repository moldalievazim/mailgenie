generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Billings {
  id      String @id @default(uuid())
  plan    String
  credits Int
  userId  String
  user    User   @relation(fields: [userId], references: [id])
}

model Bookings {
  id         String   @id
  date       DateTime
  slot       String
  email      String
  customerId String
  domainId   String   @unique
  Customer   Customer @relation(fields: [customerId], references: [id])
  domain     Domain   @relation(fields: [domainId], references: [id])
}

model Campaign {
  id        String   @id @default(uuid())
  name      String
  customers String[]
  userId    String   @unique
  createdAt DateTime @default(now())
  domainId  String?
  User      User     @relation(fields: [userId], references: [id])
  domains   Domain[]
}

model ChatMessage {
  id         String   @id @default(uuid())
  message    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatRoomId String
  seen       Boolean
  role       String
  chatRoom   Chatbot  @relation(fields: [chatRoomId], references: [id])
}

model Chatbot {
  id             String        @id @default(uuid())
  welcomeMessage String
  icon           String
  background     String
  textColor      String
  domainId       String
  helpdesk       Boolean
  chatMessages   ChatMessage[]
  domain         Domain        @relation(fields: [domainId], references: [id])
}

model Customer {
  id       String     @id @default(uuid())
  email    String
  domainId String
  demand   String
  bookings Bookings[]
  domain   Domain     @relation(fields: [domainId], references: [id])
}

model Domain {
  id               String             @id @default(uuid())
  name             String
  icon             String
  userId           String
  campaignId       String
  createdAt        DateTime?          @default(now()) @db.Timestamp(6)
  updatedAt        DateTime           @updatedAt @db.Timestamp(6)
  billingsId       String?
  bookings         Bookings?
  chatbots         Chatbot[]
  customers        Customer[]
  campaign         Campaign           @relation(fields: [campaignId], references: [id])
  user             User               @relation(fields: [userId], references: [id])
  filtersQuestions FiltersQuestions[]
  products         Product[]
}

model FiltersQuestions {
  id       String @id
  question String
  answered String
  domainId String
  domain   Domain @relation(fields: [domainId], references: [id])
}

model Product {
  id        String   @id
  name      String
  price     Int
  image     String
  createdAt DateTime @default(now())
  domainId  String
  domain    Domain   @relation(fields: [domainId], references: [id])
}

model User {
  id        String     @id @default(uuid())
  fullname  String
  clerkId   String     @unique
  type      String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  stripeId  String
  billings  Billings[]
  campaigns Campaign[]
  domains   Domain[]
}

enum Role {
  User
}
